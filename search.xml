<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Windows路由表解析</title>
      <link href="/2020/02/25/Windows%E8%B7%AF%E7%94%B1%E8%A1%A8%E8%A7%A3%E6%9E%90/"/>
      <url>/2020/02/25/Windows%E8%B7%AF%E7%94%B1%E8%A1%A8%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows路由表解析"><a href="#Windows路由表解析" class="headerlink" title="Windows路由表解析"></a>Windows路由表解析</h1><blockquote><p>这是我原本在csdn上的博客，现在搬运到这里。</p></blockquote><ul><li>在Windows上，打开cmd，输入 route print，即可打印出路由表。</li></ul><h2 id="Ipv4路由表中显示活动的路由。"><a href="#Ipv4路由表中显示活动的路由。" class="headerlink" title="Ipv4路由表中显示活动的路由。"></a>Ipv4路由表中显示活动的路由。</h2><p>  <strong>网络目标</strong>：显示了路由器连接的所有网段。</p><p>  <strong>网络掩码</strong>：显示了该网段的子网掩码，路由器通过此确定网络的地址类型。</p><p>  <strong>网关一列</strong>：显示了路由器需要把数据包发送给哪个ip地址，才能到达这个网段。</p><p>  <strong>接口一列</strong>：显示了哪个网卡连接到了合适的目的网络，该项仅显示了路由器分配给网卡的ip。</p><p>  <strong>跃点数一列</strong>：即跳数，指出了通常情况下，到达目标地址需要经过多少跳数的转发，一跳代表经过一个路由器。（跳数越低，路由成本越低，优先级往往就越高）。</p><a id="more"></a><p><img src="rtable.png" alt=""></p><h2 id="第一条路由：-网络目标0-0-0-0"><a href="#第一条路由：-网络目标0-0-0-0" class="headerlink" title="第一条路由： 网络目标0.0.0.0"></a>第一条路由： 网络目标0.0.0.0</h2><p>  这条为<strong>缺省路由</strong>，指出当一个数据包的目的网段不在路由表中时，路由器应该将数据包发送到的地方。</p><p>  这里这条路由指出了，当我的数据包的目的网段不在路由表中时，我会将数据包通过192.168.1.114的接口，发送到192.168.1.1这个地址。这样就把这个数据包交付给下一个路由器，由它进行转发，与我无关了。</p><h2 id="第二条路由：网络目标127-0-0-0和127-0-0-1，127-255-255-255"><a href="#第二条路由：网络目标127-0-0-0和127-0-0-1，127-255-255-255" class="headerlink" title="第二条路由：网络目标127.0.0.0和127.0.0.1，127.255.255.255"></a>第二条路由：网络目标127.0.0.0和127.0.0.1，127.255.255.255</h2><p>  为<strong>本地环路（环回地址）</strong></p><p>  这个网段所有地址均指向自己</p><h2 id="路由：网络目标192-168-1-0"><a href="#路由：网络目标192-168-1-0" class="headerlink" title="路由：网络目标192.168.1.0"></a>路由：网络目标192.168.1.0</h2><p>  这是路由器直连的网络。当一个数据包的目的网段是这个时，从192.168.1.114这个接口发送，即可到达目标网段。</p><h2 id="中间的路由：网络目标-169-254-0-0-到169-254-255-176"><a href="#中间的路由：网络目标-169-254-0-0-到169-254-255-176" class="headerlink" title="中间的路由：网络目标 169.254.0.0 到169.254.255.176"></a>中间的路由：网络目标 169.254.0.0 到169.254.255.176</h2><p>  这些也是路由器直连的网络。从169.254.0.0到169.254.255.255是保留地址。</p><p>  如果你的IP是自动获取的，但是网络中没有可用的DHCP服务器，这时会临时获取到这类IP。</p><h2 id="路由：网络目标192-168-1-114"><a href="#路由：网络目标192-168-1-114" class="headerlink" title="路由：网络目标192.168.1.114"></a>路由：网络目标192.168.1.114</h2><p>  这个是<strong>本地主机路由</strong>，路由器收到一个目的网段是这个时，会收下这个数据包。</p><h2 id="路由：网络目标192-168-1-255"><a href="#路由：网络目标192-168-1-255" class="headerlink" title="路由：网络目标192.168.1.255"></a>路由：网络目标192.168.1.255</h2><p>  这是<strong>本地广播路由</strong>，当系统接收到目的网段是这个的数据包时，就会从192.168.1.114这个接口以广播的形式发出。</p><h2 id="路由：网络目标224-0-0-0"><a href="#路由：网络目标224-0-0-0" class="headerlink" title="路由：网络目标224.0.0.0"></a>路由：网络目标224.0.0.0</h2><p>  这个<strong>组播路由</strong>，当系统接收到目的网段是这个的数据包时，就会从127.0.0.1，192.168.1.114，169.254.195.240和169.254.255.176这几个接口以组播的形式发出。</p><h2 id="路由：网络目标255-255-255-255"><a href="#路由：网络目标255-255-255-255" class="headerlink" title="路由：网络目标255.255.255.255"></a>路由：网络目标255.255.255.255</h2><p>  这个<strong>绝对广播路由</strong>，当系统接收到目的网段是这个的数据包时，就会从127.0.0.1，192.168.1.114，169.254.195.240和169.254.255.176这几个接口以广播的形式发出。</p><p><strong><em>如有错误，敬请指正~</em></strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RISC-V汇编详解之基本指令.md</title>
      <link href="/2020/01/07/RISC-V%E6%B1%87%E7%BC%96%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/"/>
      <url>/2020/01/07/RISC-V%E6%B1%87%E7%BC%96%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="RISC-V汇编详解之基本指令"><a href="#RISC-V汇编详解之基本指令" class="headerlink" title=" RISC-V汇编详解之基本指令"></a><div align=center> RISC-V汇编详解之基本指令</div></h1><blockquote><p> <strong><em>前言</em></strong>：<em>之前读CSAPP学了X86汇编，最近又学了RISC-V汇编。X86汇编、RISC-V汇编恰好分别是CISC和RISC的典型代表。因此打算写几篇博客介绍一下RISC-V汇编和X86汇编，然后将二者的特性做一个横向对比。</em></p></blockquote><blockquote><p>这篇文章主要介绍RISC-V汇编的基本指令，主要参考来源为MIT6.004课程<a href="https://6004.mit.edu/web/fall19" target="_blank" rel="noopener">1</a>，以及自己的一些笔记。</p></blockquote><hr><h3 id="RISC-V-ISA"><a href="#RISC-V-ISA" class="headerlink" title="RISC-V ISA"></a>RISC-V ISA</h3><p><strong>1.ISA可以理解为是一种软件和硬件之间的约定。</strong></p><ul><li>规定了运算和存储的位置</li><li>是对软件如何访问硬件的精确描述</li></ul><p><strong>2.RISC-V ISA概述</strong></p><ul><li>一种全新的、开源免费的ISA，源于加州伯克利</li><li>有几种变种：<ul><li>RV32,RV64,RV128三种不同字长</li><li>I：整数指令</li><li>M：乘法和除法指令</li><li>F和D：单精度、双精度浮点数指令</li><li>以及许多其他模块化扩展</li></ul></li></ul><hr><p><strong><em>以下我们以32位字长为例</em></strong></p><a id="more"></a><h3 id="RISC-V处理器存储结构"><a href="#RISC-V处理器存储结构" class="headerlink" title="RISC-V处理器存储结构"></a>RISC-V处理器存储结构</h3><ul><li><strong>寄存器</strong><ul><li>32个通用寄存器</li><li>每个寄存器都是32位宽</li></ul></li></ul><ul><li><strong>存储器</strong><ul><li>一个字为32位</li><li>存储器是字节可寻址的（1字节=8位）</li><li>相邻字的地址相差4字节</li><li>地址长度为32位</li><li>可寻址地址范围是2^32字节</li></ul></li></ul><p><img src="../../../../img/1.png" alt="RISC-V 左:寄存器文件 右:主存" title="RISC-V"></p><hr><h3 id="RISC-V介绍"><a href="#RISC-V介绍" class="headerlink" title="RISC-V介绍"></a>RISC-V介绍</h3><ul><li><strong>三种类型的运算</strong><ul><li>计算指令（computational）：在寄存器上执行算术和逻辑运算</li><li>控制流指令（control flow）：改变指令执行的顺序，以支持条件表达式和循环</li><li>装入/存储指令（loads and stores）：在寄存器和主存之间传送数据</li></ul></li></ul><p> <strong>1.计算指令</strong><br>  算术、比较、逻辑、移位运算</p><ul><li><p>R-R指令（Register-Register）：</p><ul><li><p>2个源操作数寄存器</p></li><li><p>1个目的寄存器</p><ul><li>格式：oper dest ，src1，src2<ul><li>oper：操作</li><li>dest：目的寄存器</li><li>src1：源寄存器1</li><li>src2：源寄存器2</li></ul></li></ul></li></ul><table><thead><tr><th>算术</th><th>比较</th><th>逻辑</th><th>移位</th></tr></thead><tbody><tr><td>add，sub</td><td>slt，sltu</td><td>and，or，xor</td><td>sll，srl，sra</td></tr></tbody></table><pre><code>slt  set less than   sltu  set less than unsignedsll     shift left logicalsrl     shift right logicalsra  shift right arithmetic</code></pre><p>e.g. </p><ul><li>add x3, x1 , x2   <ul><li>x1+x2 —&gt; x3</li></ul></li><li>slt x3, x1 , x2<ul><li>等价于x3 =( x1&lt;x2? 1 : 0)</li></ul></li></ul></li></ul><ul><li><p>R-I指令（Register-Immediate）<br>源操作数分别来自寄存器中的数值和一个小的常数（这个常数）</p><ul><li>格式：oper dest，src1，const<ul><li>addi x3，x1 ，3<ul><li>x1 + 3 —&gt; x3</li></ul></li></ul></li></ul><table><thead><tr><th>算术</th><th>比较</th><th>逻辑</th><th>移位</th></tr></thead><tbody><tr><td>addi，<del>sub</del></td><td>slti，sltiu</td><td>andi，ori，xori</td><td>slli，sril，srai</td></tr><tr><td>ps:没有subi指令，减法可通过加负数实现</td><td></td><td></td><td></td></tr></tbody></table></li><li><p>复杂的组合运算</p><ul><li>将复杂的表达式拆解成基本的R-R和R-I指令  </li></ul></li></ul><p> <strong>2.控制流指令</strong></p><ul><li><p><strong>条件跳转指令</strong></p><ul><li>格式：comp src1，src2，label<ul><li>首先进行：src1 comp src2</li><li>如果结果为1，即表达式真，跳转到label标记的指令处执行；否则，继续顺序执行下一条指令</li></ul></li></ul><table><thead><tr><th>指令</th><th>beq</th><th>bne</th><th>blt</th><th>bge</th><th>bltu</th><th>bgeu</th></tr></thead><tbody><tr><td>comp</td><td>==</td><td>!=</td><td>&lt;</td><td>&gt;=</td><td>&lt;</td><td>&gt;=</td></tr></tbody></table><p>  if(a&lt;b): c = a + 1<br>  else : c = b + 2</p><p>  bge x1 , x2 , else<br>  addi x3, x1 , 1<br>  beq x0 , x0 , end<br>  else:    addi x3, x2, 2<br>  end:</p></li><li><p>注解：以上分别为python条件语句与生成的对应的汇编代码。 我们假设寄存器x1存储a，x2存储b，x3存储c。汇编代码第三行beq，在x1 &lt; x2情形下，总是会执行，因为 x0 == x0总成立，此行的作用是跳过else分支，直接跳转到end处。</p></li><li><p><strong>无条件跳转指令</strong></p><ul><li><p>jal：无条件跳转和链接</p><ul><li>如：jal x3，label<ul><li>跳转到label标记处</li><li>label编码为目标与当前指令的偏移量</li><li>链接：将pc值，即下一条指令的地址，存入x3寄存器</li></ul></li></ul></li><li><p>jalr：通过寄存器无条件跳转并链接</p><ul><li>如：jalr x3，4(x1)<ul><li>计算x1+4作为跳转目标</li><li>能跳转到任何地址（32位），支持长跳转</li></ul></li></ul></li></ul></li><li><p><strong>常数和指令编码限制</strong></p><ul><li>指令被编码为32位<ul><li>需要确定操作：10位</li><li>需要确定2个源寄存器（10位）或者一个源寄存器（5位）附加一个小的常数</li><li>需要确定1个目的寄存器（5位）<br>ps：确定寄存器需要5位，因为共有32个通用寄存器，log2（32）=5</li></ul></li><li>R-I指令中的常数需要少于12位：32 - 10 - 5 - 5 = 12。更长的常数需要存在寄存器或是内存中。</li><li>jal指令的常数是20位宽（7位用于确定操作，5位用于确定寄存器）</li></ul></li></ul><p><strong>3.装入/加载指令</strong><br>    a = b + c</p><pre><code>load(0x4) -&gt; x1load(0x8) -&gt; x2x1 + x2  -&gt; x3x3 -&gt; store(0x10)</code></pre><p><img src="../../../../img/3.png" alt="" title="装入加载"></p><ul><li><p>地址格式:&lt;基址，偏移量&gt;</p><ul><li><p>基址通常存在寄存器中</p></li><li><p>偏移量为常数</p></li><li><p>指令格式：<br>lw dest，offset（base）<br>sw src，offset（base）</p><p>  a = b + c</p><p>  lw x1, 0x4(x0)<br>  lw x2, 0x8(x0)<br>  add x3, x1, x2<br>  sw x3, 0x10(x0)</p></li></ul></li></ul><p><strong>4.伪指令</strong><br>    指令的别名</p><table><thead><tr><th>伪指令</th><th>等效的汇编指令</th></tr></thead><tbody><tr><td>mv rd,rs</td><td>addi rd, rs ,0</td></tr><tr><td>li rd,imm</td><td>addi rd, x0,imm</td></tr><tr><td>ble x1,x2,label</td><td>bge x2,x1,label</td></tr><tr><td>beqz x1,label</td><td>beq x1,x0,label</td></tr><tr><td>bnez x1,label</td><td>bne x1,x0,label</td></tr><tr><td>j label</td><td>jal x0，label</td></tr><tr><td>lui rd , imm</td><td></td></tr></tbody></table><ul><li>lui指令<ul><li>格式：lui rd,immU</li><li>lui意为 load upper immediate</li><li>imm = {immU,12’b0}</li><li>Reg[rd] &lt;= imm</li><li>如：lui x2，2  将0x2000存入x2</li></ul></li></ul><hr><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li><strong>计算类指令：</strong><br><strong>R-R</strong>: op dest, src1,src2<br><strong>R-I</strong>:op dest, src1,const<ul><li><strong>控制流指令：</strong><ul><li>无条件跳转：<br> jal r ，label<br>  jalr r0 ，offset（r1）<ul><li>条件跳转：<br>   comp src1，src2，label</li></ul></li></ul></li></ul></li><li><strong>装入/加载指令：</strong><br>  lw dest，offset（base）<br>  sw src，offset（base）</li><li><strong>伪指令：</strong><br>  其他指令的缩写/别名</li></ul><hr><p><strong><em>如有错误，望批评指正!</em></strong><br><strong><em>转载请注明来源，谢谢</em></strong></p><hr>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
